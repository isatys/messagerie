package com.ynov.chat.controller;

import com.ynov.chat.model.Tache;
import com.ynov.chat.model.TodoList;
import com.ynov.chat.service.TaskService;
import com.ynov.chat.service.TodoListService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.Optional;


@RestController
public class TasksController {

    @Autowired
    private TaskService taskService;

    @Autowired
    private TodoListService todoListService;

    @PostMapping("/todolists/{id_todolists}/tasks")
    public Tache createTask(@PathVariable("id_todolists") final Long id_todolists, @RequestBody Tache tache) {
        TodoList tl = todoListService.getTodoList(id_todolists).get() ;
        tache.setTodoList(tl);
        tache.setDate(new Date());
        return taskService.saveTask(tache);
    }

    @GetMapping("/todolists/{id_todolists}/tasks/{id}")
    public Tache getTask(@PathVariable("id") final Long id) {
        Optional<Tache> tache = taskService.getTask(id);
        if(tache.isPresent()) {
            return tache.get();
        } else {
            return null;
        }
    }

    @GetMapping("/todolists/{id_todolists}/tasks")
    public Iterable<Tache> getTasks(@PathVariable("id_todolists") final Long id_todolists) {
        return taskService.getTasksByTodoListId(id_todolists);
    }

    @PutMapping("/todolists/{id_todolists}/tasks/{id}")
    public Tache updateTask(@PathVariable("id") final Long id, @RequestBody Tache task) {
        Optional<Tache> e = taskService.getTask(id);
        if(e.isPresent()) {
            Tache currentTache = e.get();

            boolean finished = task.isFinished();
            currentTache.setFinished(finished);

            boolean started = task.isStarted();
            currentTache.setStarted(started);

            taskService.saveTask(currentTache);
            return currentTache;
        } else {
            return null;
        }
    }


    @DeleteMapping("/todolists/{id_todolists}/tasks/{id}")
    public void deleteTask(@PathVariable("id") final Long id) {
        taskService.deleteTask(id);
    }


}